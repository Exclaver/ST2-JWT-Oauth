 // First, sort words by line and x position
        selectedWords.sort((a, b) => {
          if (a.line !== b.line) return a.line - b.line;
          return a.x - b.x;
        });
        
        // Build text with proper spacing
        let textToCopy = '';
        let currentLine = -1;
        
        selectedWords.forEach(word => {
          // Add newline if this is a new line
          if (word.line !== currentLine) {
            if (currentLine !== -1) {
              textToCopy += '\n';
            }
            currentLine = word.line;
          } else if (word.addSpaceBefore) {
            // Add space if needed and we're on the same line
            textToCopy += ' ';
          }
          
          // Add the word text
          textToCopy += word.text;
        });


before:

return(
<divstyle={{display:"flex",alignItems:'center',flexDirection:'column'}}>
<h2>useStatevsuseRef</h2>
<p>StateCount:{count}</p>
<buttononClick={incrementState}>IncrementState</button>
</div>
);

/////////3.7 thinking///////////
return(
<divstyle={{display:"flex",alignItems:'center',flexDirection:'column'}}>
<h2>useStatevsuseRef</h2>
<p>StateCount:{count}</p>
<buttononClick={incrementState}>IncrementState</button>
</div>

/////////////deepseek///////////
return
(
<
div
Style

///////////deepseek Normal:///////////
return(<divstyle={{display:"flex",alignItems:'center',flexDirection:'column'}}><h2>useStatevsuseRef</h2><p>StateCount:{count}</p><buttononClick={incrementState}>IncrementState</button></div>);

///////////select text/////////
return (
<div style={{display:"flex", alignItems: 'center', flexDirection: 'column' }}>
<h2>useState vs use Ref</h2>
<p>State Count: {count}</p>
<button onClick={incrementState}>Increment State</button>
</div>
);